#include "Navigation.h"

//×ø±êµØÍ¼
int Location[AllNodeCount][2] =
{ 873	,	389	,
1081	,	389	,
1179	,	383	,
1198	,	502	,
924	,	529	,
1098	,	472	,
756	,	502	,
558	,	322	,
683	,	319	,
706	,	390	,
1168	,	272	,
1350	,	131	,
1398	,	55	,
1185	,	144	,
908	,	100	,
765	,	127	,
592	,	97	,
592	,	145	,
683	,	239	,
598	,	239	,
536	,	534	,
607	,	534	,
604	,	502	,
775	,	502	,
802	,	467	,
908	,	485	,
923	,	512	,
990	,	529	,
990	,	516	,
1029	,	472	,
1148	,	472	,
1179	,	472	,
1148	,	272	,
1148	,	216	,
1242	,	216	,
1242	,	185	,
1398	,	185	,
1398	,	108	,
1242	,	55	,
1242	,	144	,
1070	,	144	,
1070	,	272	,
1043	,	272	,
1043	,	312	,
852	,	312	,
765	,	312	,
765	,	274	,
751	,	127	,
751	,	97	,
683	,	274	,
579	,	274	,
536	,	274	,
579	,	414	,
706	,	414	,
706	,	400	,
684	,	390	,
734	,	400	,
734	,	461	,
775	,	461	,
820	,	389	,
852	,	389	,
963	,	389	,
963	,	404	,
1029	,	404	,
1081	,	404	,
1350	,	107	,
579	,	239	,
579	,	322,
1179,  502
};
int AdjacentMatrix[AllNodeCount][AllNodeCount] =
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,
0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,
0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
};
int Distance[AllNodeCount][AllNodeCount];//´æ´¢×î¶Ì¾àÀë
int Path[AllNodeCount][AllNodeCount]; //´æ´¢×î¶ÌÂ·¾¶ 
SA::SA(Strategy s, Car* c, Task* t)
{
	//Ëã·¨²ÎÊý
	T0 = 1000;
	T = T0;
	max_iter = 1000;
	Lk = 50;
	alpha = 0.98;
	strategy = s;
	for (int i = 0; i < MaxCarNum; i++)
	{
		car[i] = c[i];
		if (car[i].CarNum != -1 && car[i].Status != OCCUPIED)
		{
			CarNum++;
		}
	}
	for (int i = 0; i < MaxTaskNum; i++)
	{
		task[i] = t[i];
		if (task[i].TaskNum != -1)
		{
			TaskNum++;
		}
	}

	bestallpath = (int**)malloc(sizeof(int) * CarNum);//×î¼ÑÈ«²¿Â·¾¶ÐòÁÐ
	for (int i = 0; i < CarNum; i++)
	{
		bestallpath[i] = (int*)malloc(sizeof(int) * (TaskNum * 2 + CarNum+1));
		for (int j = 0; j < TaskNum * 2 + CarNum+1; j++)
		{
			bestallpath[i][j] = -1;
		}
	}
	//srand((unsigned)time(NULL));
}
SA::~SA()
{}

void SA::InitPath()//³õÊ¼»¯ÔËÊäÂ·¾¶
{

	//Í¨¹ýÐòÁÐ±íÊ¾ÔËËÍ·½·¨£º[2 8]±íÊ¾Ò»¸öÈÎÎñµÄÆðµãºÍÖÕµã£¬car[2 8]±íÊ¾[2 8]ÈÎÎñÓÉÒ»Á¾³µÍê³É¡£
	//ÈôÏÖÓÐ2³µºÍ3¸öÈÎÎñ£¬Ôò¿ÉÒÔÍ¨¹ýÏÂÊö·½·¨±íÊ¾²»Í¬ÔËÊä·ÖÅä£º
	//car[2 8]car[5 7][6 4]»òcar[2 8][5 7]car[6 4]µÈ£¬car·Ö¸ô¿ªµÄÈÎÎñÓÉÆäÇ°Ò»¸öcarÍê³É
	for (int i = 0; i < CarNum; i++)
	{
		CarIndex[i] = i;
	}
	for (int i = 0; i < TaskNum; i++)
	{
		TaskIndex[i] = CarNum + i;
	}
}

void SA::StartSA()//¿ªÊ¼Ä£ÄâÍË»ð
{
	InitPath();
	float Cost0 = CalculateCost(CarIndex, TaskIndex), BestCost, NewCost = 0;
	BestCost = Cost0;
	//printf("T:%f,BestCost:%f\n", T, BestCost);
	memcpy(BestCarIndex, CarIndex, sizeof(CarIndex));
	memcpy(BestTaskIndex, TaskIndex, sizeof(TaskIndex));
	for (int iter = 0; iter < max_iter; iter++)//¿ªÊ¼Ëã·¨µü´ú
	{
		for (int i = 0; i < Lk; i++)//Ã¿¸öÎÂ¶ÈµÄÄÚÑ­»·
		{
			NewCost = NewPath(&Cost0);//Éú³ÉÐÂ½â²¢ÅÐ¶Ï
			if (NewCost < BestCost)
			{
				BestCost = NewCost;
				memcpy(BestCarIndex, CarIndex, sizeof(CarIndex));
				memcpy(BestTaskIndex, TaskIndex, sizeof(TaskIndex));
			}
		}
		T = alpha * T;// ÎÂ¶ÈÏÂ½µ
		//printf("T:%.2f,BestCost:%.2f\n", T, BestCost);
	}
	ShowResult();
}
void SA::ShowResult()
{
	//for (int i = 0; i < CarNum; i++)
	//{
	//	for (int j = 0; bestallpath[i][j] != -1; j++)
	//	{
	//		printf("%d ", bestallpath[i][j]);
	//	}
	//	printf("\n");
	//}
	//printf("\n");
	//for (int i = 0; i < CarNum; i++)
	//{
	//	printf("%d ", BestCarIndex[i]);
	//}
	//printf("\n\n");
	//for (int i = 0; i < TaskNum; i++)
	//{
	//	printf("%d ", BestTaskIndex[i]);
	//}
	//¸üÐÂÂ·¾¶
	int c = -1, index = 0;
	for (int i = 0; i < CarNum + TaskNum; i++)
	{
		for (int j = 0; j < CarNum; j++)
		{
			if (CarIndex[j] == i)
			{
				c = c + 1;
				index = 0;
				bestallpath[c][index++] = car[j].CarNodeNum;
				break;
			}
		}
		for (int j = 0; j < TaskNum; j++)
		{
			if (TaskIndex[j] == i)
			{
				bestallpath[c][index++] = task[j].StartNum;
				bestallpath[c][index++] = task[j].TargetNum;
				break;
			}
		}
	}
	//´òÓ¡Â·¾¶
	//for (int i = 0; i < CarNum; i++)
	//{
	//	for (int j = 0; j < CarNum; j++)
	//	{
	//		if (car[j].CarNodeNum == bestallpath[i][0])
	//		{
	//			printf("µÚ%dÁ¾³µµÄÂ·¾¶Îª£º\t", car[j].CarNum);
	//		}
	//	}
	//	for (int j = 0; bestallpath[i][j] != -1; j++)
	//	{
	//		printf("%d ", bestallpath[i][j]);
	//	}
	//	printf("\n");
	//}
}
float SA::CalculateCost(int carIndex[], int taskIndex[])//´ú¼Û¼ÆËã£¬Í¨¹ýµ÷Åä²ßÂÔ¾ö¶¨
{
	int index = 0, c = -1;
	int** tempallpath = (int**)malloc(sizeof(int) * CarNum);//×î¼ÑÈ«²¿Â·¾¶ÐòÁÐ
	for (int i = 0; i < CarNum; i++)
	{
		tempallpath[i] = (int*)malloc(sizeof(int) * (TaskNum * 2 + CarNum+1));
		for (int j = 0; j < TaskNum * 2 + CarNum+1; j++)
		{
			tempallpath[i][j] = -1;
		}
	}


	for (int i = 0; i < CarNum + TaskNum; i++)
	{
		for (int j = 0; j < CarNum; j++)
		{
			if (carIndex[j] == i)
			{
				c = c + 1;
				index = 0;
				tempallpath[c][index++] = car[j].CarNodeNum;
				break;
			}
		}
		for (int j = 0; j < TaskNum; j++)
		{
			if (taskIndex[j] == i)
			{
				tempallpath[c][index++] = task[j].StartNum;
				tempallpath[c][index++] = task[j].TargetNum;
				break;
			}
		}
	}

	if (strategy == MINDISTANCE)//×îÐ¡×ÜÂ·³Ì²ßÂÔ
	{
		float cost = 0;
		for (int i = 0; i < CarNum; i++)
		{
			for (int j = 0;; j++)
			{
				if (tempallpath[i][j + 1] == -1)
				{
					break;
				}
				cost += Distance[(tempallpath[i][j]) - 1][(tempallpath[i][j + 1]) - 1];
			}
		}

		for (int i = 0; i < CarNum; i++)
		{
			free(tempallpath[i]);
		}
		free(tempallpath);

		return cost;
	}
	else//×îÐ¡Ê±¼ä²ßÂÔ
	{
		float cost[MaxCarNum] = { 0 };
		for (int i = 0; i < CarNum; i++)
		{
			for (int j = 0;; j++)
			{
				if (tempallpath[i][j + 1] == -1)
				{
					break;
				}
				cost[i] += Distance[tempallpath[i][j] - 1][tempallpath[i][j + 1] - 1];
			}
		}
		float maxcost = cost[0];
		for (int i = 0; i < CarNum; i++)
		{
			if (cost[i] > maxcost)
			{
				maxcost = cost[i];
			}
		}

		for (int i = 0; i < CarNum; i++)
		{
			free(tempallpath[i]);
		}
		free(tempallpath);
		return maxcost;
	}
}
float SA::NewPath(float* Cost0)//Ä£ÄâÍË»ðËã·¨Éú³ÉÐÂ½â
{
	//p1: Ê¹ÓÃÄ¿±ê½»»»·¨²úÉúÐÂÂ·¾¶µÄ¸ÅÂÊ
	//p2 : Ê¹ÓÃ³µÁ¾½»»»·¨²úÉúÐÂÂ·¾¶µÄ¸ÅÂÊ
	//1 - p1 - p2:ÊÇÊ¹ÓÃ¹²Í¬½»»»²úÉúÐÂÂ·¾¶µÄ¸ÅÂÊ
	int newcarIndex[MaxCarNum], newtaskIndex[MaxTaskNum];
	memcpy(newcarIndex, CarIndex, sizeof(CarIndex));
	memcpy(newtaskIndex, TaskIndex, sizeof(TaskIndex));
	float p1 = 0.33, p2 = 0.33;
	float p = rand() / (RAND_MAX + 1.0);

	if (p < p1 && TaskNum>1)
	{
		//printf("%f+111\n", p);
		int sw1 = rand() % (TaskNum);
		int sw2 = rand() % (TaskNum);
		int temp;
		temp = newtaskIndex[sw1];
		newtaskIndex[sw1] = newtaskIndex[sw2];
		newtaskIndex[sw2] = temp;
	}
	else if (p < p1 + p2 && CarNum>1)
	{
		//printf("%f+222\n", p);
		int sw1 = rand() % (CarNum);
		int sw2 = rand() % (CarNum);
		int temp;
		temp = newcarIndex[sw1];
		newcarIndex[sw1] = newcarIndex[sw2];
		newcarIndex[sw2] = temp;
	}
	else
	{
		int sw1 = rand() % (TaskNum);
		int sw2 = rand() % (CarNum);
		int temp;
		if (newcarIndex[sw2] != 0)//²»ÄÜÔÚµÚÒ»¸öÎ»ÖÃ·ÅÈÎÎñ
		{
			//printf("%f+333\n", p);
			temp = newcarIndex[sw2];
			newcarIndex[sw2] = newtaskIndex[sw1];
			newtaskIndex[sw1] = temp;
		}
	}
	float Cost1 = CalculateCost(newcarIndex, newtaskIndex);
	//¾ö¶¨ÊÇ·ñ¸üÐÂ½â
	if (Cost1 < *Cost0)
	{
		*Cost0 = Cost1;
		memcpy(CarIndex, newcarIndex, sizeof(CarIndex));
		memcpy(TaskIndex, newtaskIndex, sizeof(TaskIndex));
	}
	else
	{
		p = rand() / (RAND_MAX + 1.0);//¸ù¾ÝMetropolis×¼Ôò¼ÆËãÒ»¸ö¸ÅÂÊ
		if (p < exp(-(Cost1 - *Cost0) / T))//Éú³ÉÒ»¸öËæ»úÊýºÍÕâ¸ö¸ÅÂÊ±È½Ï£¬Èç¹û¸ÃËæ»úÊýÐ¡ÓÚÕâ¸ö¸ÅÂÊ
		{
			*Cost0 = Cost1;
			memcpy(CarIndex, newcarIndex, sizeof(CarIndex));
			memcpy(TaskIndex, newtaskIndex, sizeof(TaskIndex));
		}
	}
	return *Cost0;
}


float CalculateD(float x0, float y0, float x1, float y1)
{
	return sqrt((x0 - x1) * (x0 - x1) + (y0 - y1) * (y0 - y1));
}

void Floyd() 
{
	int v, w, k;

	for (v = 0; v < AllNodeCount; v++)
		for (w = 0; w < AllNodeCount; w++)
		{
			if (AdjacentMatrix[v][w] == 1)
			{
				Distance[v][w] = CalculateD(Location[v][0], Location[v][1], Location[w][0], Location[w][1]);
			}
			else
			{
				Distance[v][w] = 99999;
			}

			Path[v][w] = w;
		}
	for (k = 0; k < AllNodeCount; k++)
		for (v = 0; v < AllNodeCount; v++)
			for (w = 0; w < AllNodeCount; w++)
			{
				if (Distance[v][w] > Distance[v][k] + Distance[k][w])
				{
					Distance[v][w] = Distance[v][k] + Distance[k][w];
					Path[v][w] = Path[v][k];
				}
			}
	//cout << endl;
	//cout << "Â·¾¶¾ØÕóÎª£º" << endl;
	//for (int i = 0; i < AllNodeCount; i++)  //´òÓ¡×î¶ÌÂ·¾¶¾ØÕó 
	//{
	//	for (int j = 0; j < AllNodeCount; j++)
	//		cout << Path[i][j] << " ";
	//	cout << endl;
	//}
	//for (int i = 0; i < AllNodeCount; i++)  //´òÓ¡ÈÎÒâÁ½µã×î¶ÌÂ·¾¶ 
	//{
	//	for (int j = 0; j < AllNodeCount; j++)
	//	{
	//		if (i == j) continue;
	//		cout << i + 1 << "->" << j + 1 << "µÄ×î¶Ì¾àÀëÎª:" << Distance[i][j] << endl;
	//		cout << "×î¶ÌÂ·¾¶Îª£º" << i + 1;
	//		k = Path[i][j];
	//		while (k != j)
	//		{
	//			cout << "->" << k + 1;
	//			k = Path[k][j];
	//		}
	//		cout << "->" << j + 1 << endl;
	//	}
	//}
}
